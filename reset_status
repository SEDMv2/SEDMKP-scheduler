#!/usr/bin/env python

import numpy as np
import optparse
import urllib
import requests
import glob
import pandas as pd
from astropy.time import Time, TimeDelta

from io import StringIO

def parse_commandline():
    """
    Parse the options given on the command-line.
    """
    parser = optparse.OptionParser()
    parser.add_option("-w", "--host", default="https://fritz.science",
                      help="Host url for skyportal instance, by default fritz")
    parser.add_option("-p", "--queuePath", default="/home/sedm/Queue/sedmv2", help="Path where queue scripts are")
    parser.add_option("-t", "--token", help="Fritz/skyportal token, required")
    parser.add_option("-a", "--action", choices=["expire", "reset"], help="Choose action, expire requests or reset skipped requests")

    opts, args = parser.parse_args()

    return opts, args

def query_requests(session, action):
    instrument_id = 1078
    # endpoint = 'instrument'
    # url = urllib.parse.urljoin(opts.host, f'/api/{endpoint}')
    # response = session.request(method, url, headers=headers)
    # for instrument in response.json()["data"]:
    #     if instrument["name"] == "SEDMv2":
    #         instrument_id = instrument["id"]
    #         break
    method = 'GET'
    endpoint = f'followup_request/schedule/{instrument_id}'
    url = urllib.parse.urljoin(opts.host, f'/api/{endpoint}')

    if action == "reset":
        params = {'status': 'ongoing', 'output_format': 'csv'}
        response = session.request(method, url, params=params, headers=headers)

        output = StringIO(response.content.decode('utf-8'))
        if 'error' in response.content.decode('utf-8'):
            print('reset_status: action=reset, could not access queue with status ongoing')
        df = pd.read_csv(output)
        print('------------------------------------------------------')
        print(df)
        print('------------------------------------------------------')
    elif action == "expire":
        params = {'status': 'submitted', 'output_format': 'csv', 'endDate':(Time.now()-TimeDelta(1,format='jd')).isot}
        response = session.request(method, url, params=params, headers=headers)
        output = StringIO(response.content.decode('utf-8'))
        if 'error' in response.content.decode('utf-8'):
            print('reset_status: action=expire, could not access queue with status submitted')
        df1 = pd.read_csv(output)

        params = {'status': 'ongoing', 'output_format': 'csv', 'endDate':(Time.now()-TimeDelta(1,format='jd')).isot}
        response = session.request(method, url, params=params, headers=headers)
        output = StringIO(response.content.decode('utf-8'))
        if 'error' in response.content.decode('utf-8'):
            print('reset_status: action=expire, could not access queue with status ongoing')
        df2 = pd.read_csv(output)
        df = pd.concat([df1, df2])
        print('------------------------------------------------------')
        print(df)
        print('------------------------------------------------------')
    else:
        print('reset_status: action=invalid value')
        df = None
    return df

# Parse command line
opts, args = parse_commandline()

if opts.token:
    headers = {'Authorization': f'token {opts.token}'}
elif glob.glob(f'{opts.queuePath}/token.txt')!=[]:
    token = open(f'{opts.queuePath}/token.txt', 'r').read().strip()
    headers = {'Authorization': f'token {token}'}
else:
    headers = None
    print('reset_status: Token not provided,exiting')
    exit(1)
    
session = requests.Session()

df = query_requests(session, opts.action)
if df is None:
    print('Empty dataframe')
    exit(1)

# for i in range(len(df)):
#     row = df.iloc[i]
#     request_id = row['request_id']
#     endpoint = f'followup_request/{request_id}'
#     url = urllib.parse.urljoin(opts.host, f'/api/{endpoint}')
#     if opts.action == 'reset':
#         params = {'status':'submitted'}
#     elif opts.action == 'expire':
#         params = {'status':f'Expired {Time.now().isot}'}
#     else:
#         exit(1)
#
#     response = session.request('PUT', url, json=params, headers=headers).json()
#     if response['status']=="success":
#         print(f'reset_status: Successfully updated request {request_id}')
#     else:
#         print(f'reset_status: Error in updating request {request_id}')
#         print(response['message'])
