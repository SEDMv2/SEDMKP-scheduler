#!/usr/bin/env python

import numpy as np
import optparse
import urllib
import requests
import glob
import pandas as pd
from astropy.time import Time, TimeDelta
import sys

from io import StringIO

def parse_commandline():
    """
    Parse the options given on the command-line.
    """
    parser = optparse.OptionParser()
    parser.add_option("-w", "--host", default="https://fritz.science",
                      help="Host url for skyportal instance, by default fritz")
    parser.add_option("-p", "--queuePath", default="/home/sedm/Queue/sedmv2", help="Path where queue scripts are")
    parser.add_option("-t", "--token", help="Fritz/skyportal token, required")
    parser.add_option("-a", "--action", choices=["expire", "reset", "reset-filler", "delete-filler"],
                      help="Choose action, expire requests or reset skipped requests")

    opts, args = parser.parse_args()

    return opts, args

def query_requests(session, action):
    instrument_id = 1078
    method = 'GET'
    endpoint = f'followup_request'
    url = urllib.parse.urljoin(opts.host, f'/api/{endpoint}')

    requestlist = []
    if action == "reset":
        params = {'status': 'ongoing', 'instrumentID':instrument_id}
        response = session.request(method, url, params=params, headers=headers).json()
        if response['status']!='success':
            print('reset_status: action=reset, could not access queue with status ongoing')
        else:
            tMatches = response['data']['totalMatches']
            requestlist = requestlist + response['data']['followup_requests']
            if tMatches>100:
                for i in range(2, int(np.ceil(tMatches/100))+1):
                    params = {'status': 'ongoing', 'instrumentID':instrument_id, 'pageNumber':i}
                    response = session.request(method, url, params=params, headers=headers).json()
                    requestlist = requestlist + response['data']['followup_requests']

        params = {'status': 'Failed', 'instrumentID':instrument_id}
        response = session.request(method, url, params=params, headers=headers).json()
        if response['status']!='success':
            print('reset_status: action=reset, could not access queue with status failed')
        else:
            tMatches = response['data']['totalMatches']
            requestlist = requestlist + response['data']['followup_requests']
            if tMatches>100:
                for i in range(2, int(np.ceil(tMatches/100))+1):
                    params = {'status': 'Failed', 'instrumentID':instrument_id, 'pageNumber':i}
                    response = session.request(method, url, params=params, headers=headers).json()
                    requestlist = requestlist + response['data']['followup_requests']

        data = []
        for rq in requestlist:
            data.append([rq['id'], rq['obj_id'], rq['status'], Time(rq['payload']['end_date'],format='isot')])
        df = pd.DataFrame(columns=['request_id','object_id','status','endDate'],data=data)
        df = df[df['endDate'] > Time.now()].reset_index(drop=True)

    elif action == "reset-filler":
        params = {'instrumentID':instrument_id, 'status':f'{Time.now().isot[0:10]}'}
        response = session.request(method, url, params=params, headers=headers).json()
        if response['status']!='success':
            print('reset_status: action=reset, could not access queue with status date')
        else:
            tMatches = response['data']['totalMatches']
            requestlist = requestlist + response['data']['followup_requests']
            if tMatches>100:
                for i in range(2, int(np.ceil(tMatches/100))+1):
                    params = {'instrumentID':instrument_id, 'status':f'{Time.now().isot[0:10]}', 'pageNumber':i}
                    response = session.request(method, url, params=params, headers=headers).json()
                    requestlist = requestlist + response['data']['followup_requests']

        data = []
        for rq in requestlist:
            data.append([rq['id'], rq['obj_id'], rq['status'], rq['allocation_id']])
        df = pd.DataFrame(columns=['request_id','object_id','status','allocation_id'],data=data)
        df = df[df['allocation_id'] == 1050].reset_index(drop=True)

    elif action == "delete-filler":
        params = {'instrumentID':instrument_id, 'status':'submitted'}
        response = session.request(method, url, params=params, headers=headers).json()
        if response['status']!='success':
            print('reset_status: action=reset, could not access queue')
        else:
            tMatches = response['data']['totalMatches']
            requestlist = requestlist + response['data']['followup_requests']
            if tMatches>100:
                for i in range(2, int(np.ceil(tMatches/100))+1):
                    params = {'instrumentID':instrument_id, 'status':'submitted', 'pageNumber':i}
                    response = session.request(method, url, params=params, headers=headers).json()
                    requestlist = requestlist + response['data']['followup_requests']

        data = []
        for rq in requestlist:
            data.append([rq['id'], rq['obj_id'], rq['status'], rq['allocation_id']])
        df = pd.DataFrame(columns=['request_id','object_id','status','allocation_id'],data=data)
        df = df[df['allocation_id'] == 1050].reset_index(drop=True)

    elif action == "expire":
        params = {'status': 'submitted', 'instrumentID':instrument_id}
        response = session.request(method, url, params=params, headers=headers).json()
        if response['status']!='success':
            print('reset_status: action=expire, could not access queue with status submitted')
        else:
            tMatches = response['data']['totalMatches']
            requestlist = requestlist + response['data']['followup_requests']
            if tMatches>100:
                for i in range(2, int(np.ceil(tMatches/100))+1):
                    params = {'status': 'submitted', 'instrumentID':instrument_id, 'pageNumber':i}
                    response = session.request(method, url, params=params, headers=headers).json()
                    requestlist = requestlist + response['data']['followup_requests']

        params = {'status': 'ongoing', 'instrumentID':instrument_id}
        response = session.request(method, url, params=params, headers=headers).json()
        if response['status']!='success':
            print('reset_status: action=expire, could not access queue with status ongoing')
        else:
            tMatches = response['data']['totalMatches']
            requestlist = requestlist + response['data']['followup_requests']
            if tMatches>100:
                for i in range(2, int(np.ceil(tMatches/100))+1):
                    params = {'status': 'ongoing', 'instrumentID':instrument_id, 'pageNumber':i}
                    response = session.request(method, url, params=params, headers=headers).json()
                    requestlist = requestlist + response['data']['followup_requests']

        data = []
        for rq in requestlist:
            data.append([rq['id'], rq['obj_id'], rq['status'], Time(rq['payload']['end_date'],format='isot')])
        df = pd.DataFrame(columns=['request_id','object_id','status','endDate'],data=data)
        df = df[df['endDate']<(Time.now()-TimeDelta(1,format='jd'))].reset_index(drop=True)

    else:
        print('reset_status: action=invalid value')
        df = pd.DataFrame()

    print('------------------------------------------------------')
    print(df)
    print('------------------------------------------------------')
    return df

# Parse command line
opts, args = parse_commandline()

if opts.token:
    headers = {'Authorization': f'token {opts.token}'}
elif glob.glob(f'{opts.queuePath}/token.txt')!=[]:
    token = open(f'{opts.queuePath}/token.txt', 'r').read().strip()
    headers = {'Authorization': f'token {token}'}
else:
    headers = None
    print('reset_status: Token not provided,exiting')
    sys.exit(1)
    
session = requests.Session()

df = query_requests(session, opts.action)
if len(df)==0:
    print('Empty dataframe')
    sys.exit(1)

for i in range(len(df)):
    row = df.iloc[i]
    request_id = row['request_id']
    print(request_id)
    endpoint = f'followup_request/{request_id}'
    url = urllib.parse.urljoin(opts.host, f'/api/{endpoint}')
    if opts.action == 'reset':
        params = {'status':'submitted'}
        action = 'PUT'
    elif opts.action == 'reset-filler':
        params = {'status':'submitted'}
        action = 'PUT'
    elif opts.action == 'expire':
        params = {'status':f'Expired {Time.now().isot}'}
        action = 'PUT'
    elif opts.action == 'delete-filler':
        params = {}
        action = 'DELETE'
    else:
        sys.exit(1)

    count = 0
    updated = False
    while (not updated) and count < 3:
        response = session.request(action, url, json=params, headers=headers).json()
        if response['status']=="success":
            print(f'reset_status: Successfully updated request {request_id}')
            updated = True
        else:
            print(f'reset_status: Error in updating request {request_id}')
            print(response['message'])
        count = count + 1
