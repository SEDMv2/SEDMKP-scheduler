#!/usr/bin/env python

import numpy as np
import optparse
import urllib
import requests
import sys
import glob
import logging
from astropy.time import Time
import pandas as pd

def parse_commandline():
    """
    Parse the options given on the command-line.
    """
    parser = optparse.OptionParser()
    parser.add_option("-w", "--host", default="https://fritz.science",
                      help="Host url for skyportal instance, by default fritz")
    parser.add_option("-p", "--queuePath", default="/home/sedm/Queue/sedmv2", help="Path where queue scripts are")
    parser.add_option("-r", "--request_id", help="Request id to update")
    parser.add_option("-s", "--status", help="Status of the request", type=int)
    parser.add_option("-t", "--token", help="Fritz/skyportal token, required")

    opts, args = parser.parse_args()

    return opts, args


# Parse command line
opts, args = parse_commandline()

logging.basicConfig(filename=f'{opts.queuePath}/logs/scheduler_{Time.now().strftime("%Y%m%d")}.log', encoding='utf-8', level=logging.DEBUG,
                    format='%(asctime)s %(message)s')
logging.getLogger("urllib3").setLevel(logging.CRITICAL)

requests_filepath = f'{opts.queuePath}/requests/requests_{Time.now().strftime("%Y%m%d")}.csv'

# ROS supplies args not opts, load them
if opts.request_id is None or opts.status is None:
    if len(args)==2:
        opts.request_id = args[1]
        opts.status = args[0]
    else:
        logging.error('obs_stat: No request_id and status supplied, exiting')
        exit(1)

# Load token for fritz query
if opts.token:
    headers = {'Authorization': f'token {opts.token}'}
elif glob.glob(f'{opts.queuePath}/token.txt')!=[]:
    token = open(f'{opts.queuePath}/token.txt', 'r').read().strip()
    headers = {'Authorization': f'token {token}'}
else:
    headers = None
    logging.error('obs_stat: Token not provided,exiting')
    exit(1)
    
session = requests.Session()

# Check status input from ROS
status = {'0': "Completed", '1': "Failed", '2': "Skipped"}
if opts.status not in status.keys():
    logging.error('obs_stat: Invalid status, exiting')
    exit(1)

# Update the local requests log file
logdf = pd.read_csv(requests_filepath)
logdf.loc[logdf['request_id'] == opts.request_id, 'status'] = status[opts.status]
logdf.to_csv(requests_filepath, index=False)

# Query fritz using request_id arg to get rest of the request params
updated = False
count = 0
while (not updated) and count < 3:
    endpoint = f'followup_request/{opts.request_id}'
    url = urllib.parse.urljoin(opts.host, f'/api/{endpoint}')
    response = session.request('GET', url, params=None, headers=headers).json()
    if 'error' in response['status'] or response['data']=={}:
        logging.error(f'obs_stat: Could not query the request, check request_id {opts.request_id}')
        logging.error(f'obs_stat: {response["message"]}')
        count = count + 1
        continue

    # Use the obtained request params to edit the request
    params = {'allocation_id': response['data']['allocation_id'],
              'obj_id': response['data']['obj_id'],
              'status': status[opts.status]}
    response = session.request('PUT', url, json=params, headers=headers).json()
    if response['status']=="success":
        logging.info(f'obs_stat: Successfully updated request {opts.request_id}')
        updated = True
    else:
        logging.error(f'obs_stat: Error in updating request {opts.request_id}')
        logging.info(f'obs_state: {response["message"]}')
    count = count + 1

if updated:
    exit(0)
else:
    exit(1)